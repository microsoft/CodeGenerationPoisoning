import cgrammer
import base64
import datetime
import io
import dash
import urllib
from dash.dependencies import Input, Output, State
#import dash_bootstrap_components as dbc
#import dash_dangerously_set_inner_html
import dash_core_components as dcc
import dash_html_components as html
import dash_cytoscape as dash_cytoscape
import pandas as pd
import numpy as np
import json
import flask
import os
import dash_table
import time
from sklearn.manifold import TSNE
from sklearn.manifold import MDS

from sklearn.metrics.cluster import adjusted_rand_score
from Service.ilincsService import IlincsSearch
from Service.make_clustergrammer import LoadFile
from Service.database_search import SearchQuery
#
#from flask import send_from_directory
#
# app = dash.Dash()
# app.css.config.serve_locally = True
# app.scripts.config.serve_locally = True



from flask import send_from_directory, send_file

ilincsSearch = IlincsSearch()
loadFile = LoadFile()
searchQuery = SearchQuery()
rand_score = adjusted_rand_score

thingy = dash.Dash()

external_scripts = [
    {'src': 'https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js'},
    {'src': 'https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js'},
    {'src': 'https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js'},
    {'src': 'https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js'}

]
#app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

app = dash.Dash(__name__,
                external_scripts=external_scripts)
#If you are assigning callbacks to components
#that are generated by other callbacks
app.config['suppress_callback_exceptions']=True
app.title = 'Sig2Lead'
app.layout = html.Div([
    html.Img(src='/img/sig2lead_black2.png')
])
# app.css.append_css({"external_url": 'https://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.no-icons.min.css'})
# app.css.append_css({"external_url": 'https://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css'})

app.scripts.config.serve_locally = True
app.css.config.serve_locally = True

print('loading JSON Clustergrammer data...')
# with open('mult_view.json', 'r') as f:
#     network_data = json.load(f)
print('done')
STARTING_DRUG = 'BCL2A1'
df = pd.read_csv('KDgenes.txt', sep="\n")
print df
#df = pd.read_csv('KDgenes.txt').drop(['Unnamed: 0'],axis=1)
#df = pd.read_csv('small_molecule_drugbank.csv').drop(['Unnamed: 0'],axis=1)

app.css.config.serve_locally = True
app.scripts.config.serve_locally = True

BACKGROUND = 'rgb(245,222,179)'

tabs_styles = {
    'height': '34px',
    'marginTop': '15px'
}
tab_style = {
    'border': '1px solid rgb(245,222,179)',
    'padding': '6px',
    'fontWeight': 'bold'
}

tab_selected_style = {
    'borderTop': '1px solid rgb(245,222,179)',
    'borderBottom': '1px solid rgb(245,222,179)',
    'backgroundColor': BACKGROUND,
    'color': 'black',
    'padding': '6px'
}

app.layout = html.Div([
html.Div([
html.Div([
    # Row 1: Header and Intro text
    #
    # html.Link(rel='shortcut icon', href = '/static/img/sig2lead.png'),

    html.Link(
        rel='stylesheet',
        href='/static/body.css'
    ),
    html.Link(
        rel='stylesheet',
        href='/static/skeleton.min.css'
    ),
    html.Link(
        rel='stylesheet',
        href='/static/fonts.googleapis.css'
    ),
    html.Link(
        rel='stylesheet',
        href='/static/fonts.googleapis.medium.css'
    ),

    # html.Link(
    #     rel='stylesheet',
    #     href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'
    # )
    html.Link(
        rel='stylesheet',
        href='https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css'
    ),

    html.Link(
        rel='stylesheet',
        href='https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css'
    ),


    html.Link(
        rel='stylesheet',
        href='/static/stylesheet.css'
    ),


    #nav wrapper starts here
    html.Div(
        children=[
            # nav bar

            html.Nav(
                # inside div
                html.Div(
                    children=[
                        html.A('Sig2Lead',
                            style={
                                'position': 'relative',
                                'top': '0px',
                                'left': '10px',
                                'font-family': 'Dosis',
                                'display': 'inline',
                                'font-size': '3.0rem',
                                'color': '#4D637F'
                            }, href='/'),
                        html.A('About',
                               style={
                                   'position': 'relative',
                                    'float':'right',
                                   'top': '0px',
                                   'left': '10px',
                                   'paddingRight':'15px',
                                   'font-family': 'Dosis',
                                   'display': 'inline',
                                   'font-size': '3.0rem',
                                   'color': '#4D637F'
                               }, href='/about'),



                        # ul list components
                        # html.Ul
                        # (
                        #     children=[
                        #         html.Li(html.A('Configuration', href='/apps/config')),
                        #         html.Li(html.A('Segmentation', href='/apps/segmentation')),
                        #         html.Li(html.A('Main Page', href='/apps/users')),
                        #     ],
                        #     id='nav-mobile',
                        #     className='right hide-on-med-and-down'
                        # ),
                    ],
                    className=' nav-wrapper'
                ), style={'background-color': 'white', 'paddingTop':'10px'}),

        ],
        className='navbar-fixed'
    ),

    html.Hr([],style={'height':'1px','color': '#4D637F','border':'none','color':'#333','background-color':'#333'}),


    html.Div([



        # dcc.Loading(id="loading-1", children=[html.Div(id="output-1")], type="default"),
        # dcc.Input(id="input-1", value='Input triggers local spinner'),
        # html.Div(
        #     [
        #         dcc.Loading(
        #             id="loading-2",
        #             children=[html.Div([html.Div(id="output-2")])],
        #             type="circle",
        #         ),
        #         dcc.Input(id="input-2", value='Input triggers nested spinner'),
        #     ]
        # ),


        html.Div([

            html.Div([

                html.H5('Select a Gene From The Dropdown.', style={'display': 'inline-block'}),
                html.Abbr(html.I(className="fa fa-question-circle fa-md"), title="Optional SDF File of User Defined Compounds.", style={'display': 'inline-block'})
            ], style={'margin-left': '10px','display': 'inline-block'}),
            dcc.Dropdown(id='gene_dropdown',
                         multi=False,
                         value=STARTING_DRUG,
                         options=[{'label': i, 'value': i} for i in df['GeneName']]),
            html.H6('Select number of LINCS Compounds, Condordant to the Selected Gene KnockDown Signatures.', style={'display': 'inline-block'}),
            html.Div(
            dcc.Slider(
                id='compound_slider',
                min=0,
                max=400,
                step=50,
                value=100,
                marks={i: '{}'.format(i) for i in range(0,401,50)}

            ), style={'width': '90%'})

        ], className='six columns'),
        html.Div([
            html.Div([
# html.I(className="fa fa-question fa-lg"),
                html.H5('SMILES File of Compounds of Interest (Optional).', style={'display': 'inline-block'})
                , html.Abbr(html.I(className="fa fa-question-circle fa-md"), title="Optional SMILES File of User Defined Compounds in CSV Format with Name and SMILES as Headers.", style={'display': 'inline-block'})
                , html.A(id='download-link2', children='   Download An Example', href="/dash/urlToDownload")
            ], style={'margin-left': '10px','display': 'inline-block'}),

            # dcc.Dropdown(id='chem_dropdown3',
            #              multi=True,
            #              value=[STARTING_DRUG],
            #              options=[{'label': i, 'value': i} for i in df['NAME'].tolist()]
            #              ),
            html.Div([
                dcc.Upload(
                    id='upload-data',
                    children=html.Div([
                        '(Optional) Drag and Drop SDF File of Compounds of Interest or ',
                        html.A('Select Files')
                    ]),
                    style={
                        'width': '100%',
                        'height': '35px',
                        'lineHeight': '35px',
                        'borderWidth': '1px',
                        'borderStyle': 'dashed',
                        'borderRadius': '5px',
                        'textAlign': 'center',
                        'fontSize': '11px'
                        #'margin': '10px'
                    },
                    # Allow multiple files to be uploaded
                    multiple=True
                )

            ])
            # html.Div([
            #     html.A(id='download-link', children='Download File'),
            #     dcc.Dropdown(
            #         id='dropdown',
            #         options=[{'label': i, 'value': i} for i in ['NYC', 'LA' 'SF']],
            #         value='NYC',
            #         clearable=False
            #     )
            # ])

        ], className='six columns')




    ], className='row')



    #uploaded csv file
    , html.Hr([], style={'height': '1px', 'color': 'steelBlue', 'border': 'none', 'color': 'steelBlue',
                       'background-color': 'steelBlue', 'marginTop':'40px'})
    # Hidden div inside the app that stores the intermediate value
    , dcc.Loading(id="loading-1", children=[html.Div(id='intermediate-value', style={'display': 'none'})], type="default")
    , html.Div(id='output-data-upload')
#     , cgrammer.cgrammer(
#         id='cgram-component',
#         label='',
# #        network_data=new_network
#
#     )
    , dcc.Loading(id="loading-2", children=[html.Div(id='heatmap', className='row twelve columns', style={'position': 'relative', 'right': '15px','marginBottom':'10px'})], type="circle")
    , html.Div(id='post-process', className='row twelve columns', style={'position': 'relative', 'right': '15px','paddingBottom':'100px','marginBottom':'100px'})

    #, html.Div(id='heatmap', className='row twelve columns', style={'position': 'relative', 'right': '15px','paddingBottom':'100px','marginBottom':'100px'})
    # , html.Div([
    #     # html.Div([
    #     #     html.Div([
    #     #
    #     #         html.P('Copy and Paste The Selected Compounds for Further Analysis.')
    #     #     ], style={'margin-left': '10px'}),
    #     #     dcc.Dropdown(id='chem_dropdown',
    #     #                  multi=True,
    #     #                  value=[STARTING_DRUG],
    #     #                  options=[{'label': i, 'value': i} for i in df.tolist()]),
    #     # ], className='twelve columns')
    #
    # ], className='row')
], className='ten columns offset-by-one', style={'background-color':'white'})
], className='twelve columns', style={'background-color':'white', 'paddingBottom':'20px','minHeight': '100%'}

)
    , html.Footer(


        html.Div(
            [

                html.H5(

                    '',
                    className='one columns',
                    style={'text-align': 'right'}
                ),
                html.Img(

                    src="/static/img/sig2lead_black2.png",
                    id='well_text',
                    className='three columns'
                    ,
                    style={'width':'300px', 'height':'85px', 'background-position':'center', 'padding-top':'10px'}

                ),
                html.H5(

                    '',
                    className='one columns',
                    style={'text-align': 'right'}
                ),

                #ul list components
                html.Div(

                    [
                    html.H5(
                        'Other LINCS Tools:',
                        className='two columns',
                        style={'text-align': 'right', 'color':'White'}
                    ),
                    html.Ul
                    (
                        children=[
                            html.Li(html.A('iLINCS', href='http://ilincs.org', target="_blank")),
                            html.Li(html.A('PiNET', href='http://pinet-server.org', target="_blank")),
                            html.Li(html.A('Enrichr', href='https://amp.pharm.mssm.edu/Enrichr/', target="_blank")),
                        ],
                        id='nav-mobile',
                        style={'text-align': 'left', 'padding-top':'10px'},
                        className='one columns hide-on-med-and-down'
                    )
                ]),


                html.H5(

                    ['Supported By NIH ',  html.A('LINCS', href='http://www.lincsproject.org/', target="_blank"), ' Program'],
                    className='three columns',
                    style={'text-align': 'right', 'color':'White'}
                ),

                # dcc.Dropdown(id='gene_dropdown',
                #              multi=True,
                #              value=[STARTING_DRUG],
                #              className='three columns',
                #              options=[{'label': i, 'value': i} for i in df['NAME'].tolist()]
                #              ),
                html.H5(

                    '',
                    className='one columns',
                    style={'text-align': 'right'}
                ),
            ],
            className='row'

        ), style={ 'width':'100%','background-color':'black', 'bottom': '0px','marginTop': '130px', 'overflow': 'hidden', 'position':'fixed'}

    )

], className='twelve columns'

)


# @app.callback(Output("output-1", "children"), [Input("heatmap", "children")])
# def input_triggers_spinner(value):
#     #time.sleep(10)
#     return value

#
# @app.callback(Output("output-2", "children"), [Input("input-2", "value")])
# def input_triggers_nested(value):
#     time.sleep(10)
#     return value



@app.server.route('/dash/urlToDownload')
def download_csv():
    return send_file('data/SMILES.csv',
                     mimetype='text/csv',
                     attachment_filename='SMILES.csv',
                     as_attachment=True)

# @app.callback(Output('download-link', 'href'),
#               [Input('dropdown', 'value')])
# def update_href(dropdown_value):
#     df = pd.DataFrame({dropdown_value: [1, 2, 3]})
#     relative_filename = os.path.join(
#         'downloads',
#         '{}-download.xlsx'.format(dropdown_value)
#     )
#     absolute_filename = os.path.join(os.getcwd(), relative_filename)
#     writer = pd.ExcelWriter(absolute_filename)
#     df.to_csv(writer, 'Sheet1')
#     #df.to_excel(writer, 'Sheet1')
#     writer.save()
#     return '/{}'.format(relative_filename)
#
#
# @app.server.route('/downloads/<path:path>')
# def serve_static(path):
#     root_dir = os.getcwd()
#     return flask.send_from_directory(
#         os.path.join(root_dir, 'downloads'), path
#     )

@app.server.route("/api/clust/")
def make_clustergram(total_lsm,total_sim,total_cell,total_concent,total_time,delimit_final,link):


    arrays_rows = arrays_columns = [np.array(total_lsm),  # Row headers

                       np.array(total_sim),  # Category 1
                       np.array(total_cell),  # Category 2
                       np.array(total_concent),  # Category 2
                       np.array(total_time)]  # Category 3

    tuples_rows = list(zip(*arrays_rows))
    tuples_columns = list(zip(*arrays_columns))
    rows_labels = pd.MultiIndex.from_tuples(tuples_rows)
    columns_labels = pd.MultiIndex.from_tuples(tuples_columns)

    a = delimit_final


    df = pd.DataFrame(a, index=rows_labels, columns=columns_labels)
    thingy.layout = html.Div([
        html.Div(html.H1(children="hello")),
        html.Label("thing")
    ])
    print "making clustergrammer"
    #print loadFile.make_json_from_txt(df, link)

    return json.loads(loadFile.make_json_from_txt(df, link))


@app.server.route("/api/submitGeneToIlincs/<gene_name>/<link>/<topConcordance>")  # example: bcl2a1
def submitGeneToIlincsMethod(gene_name, link, topConcordance, input_df):
    # data = json.load(urllib2.urlopen(link))
    # return str(data)

    print 'It starts...'
    output = {}
    gene_data = ilincsSearch.search_gene(gene_name)

    sigid = []

    initial_list = []
    # list_of_match_sims = []

    lsm_sublist = []
    concordance_sublist = []

    # print data

    total_lsm = []
    total_concordance = []
    total_cell = []
    total_concent = []
    total_time = []
    final_distance_list = []

    for item in gene_data:
        sigid.append(str(item['signatureid']))

    # printing all signatures associated with gene
    # print sigid

    id_count = 0
    for id in sigid:
        id_count += 1
        print 'Searched %s ids' % id_count

        sigid_data = ilincsSearch.search_sigid(id)

        for pert in sigid_data:
            #print pert
            lsm = str(pert['lincspertid'])
            concordance = str(pert['similarity'])  # concordance
            cell = str(pert['cellline'])
            concent = str(pert['concentration'])
            time = str(pert['time'])
            if lsm != 'NA':
                if float(concordance) > 0.0:
                    temp_tuple = (concordance, lsm, cell, concent, time)
                    initial_list.append(temp_tuple)

                    # print sigid_data
    print 'Search complete, ranking has begun...'

    sorted_by_concordance = sorted(initial_list, key=lambda tup: tup[0])

    list_of_concordance = sorted_by_concordance[len(sorted_by_concordance) - topConcordance:]
    print "list_of_concordance"
    #print list_of_concordance

    for item in list_of_concordance:
        # for item in sorted_by_lsm_500:
        lsm_sublist.append(item[1])
        concordance_sublist.append(item[0])



    distance_list = searchQuery.report_matrix(','.join(lsm_sublist), ','.join(concordance_sublist), topConcordance,
                                              input_df)


    for item in list_of_concordance:
        #print item

        total_lsm.append('Compound: ' + item[1])
        total_concordance.append('Concordance: ' + item[0])
        total_cell.append('Cell Line: ' + item[2])
        total_concent.append('Concentration: ' + item[3])
        total_time.append('Time: ' + item[4])

    # for item in input_df:
    #     # print item
    #     total_lsm.append('Compound: ' + item['Name'] or "")
    #     total_concordance.append('Concordance: ' + "NA")
    #     total_cell.append('Cell Line: ' + "NA")
    #     total_concent.append('Concentration: ' + "NA")
    #     total_time.append('Time: ' + "NA")
    # searchQuery.report_matrix(','.join(['LSM - 4132','LSM - 3359']), ','.join(concordance_sublist), topConcordance,
    #                           input_df)
    cgram_obj = make_clustergram(total_lsm, total_concordance, total_cell, total_concent, total_time, distance_list, link)
    X = cgram_obj['mat']
    X_embedded_tsne = TSNE(n_components=3, perplexity=100.0, early_exaggeration=12.0,
                      learning_rate=500.0, n_iter=10000, n_iter_without_progress=500, min_grad_norm=1e-08,
                      metric="euclidean", init="random", verbose=0, random_state=None,
                      method="barnes_hut", angle=0.5).fit_transform(X)
    X_embedded_2d = TSNE(n_components=2, perplexity=100.0, early_exaggeration=12.0,
                      learning_rate=500.0, n_iter=10000, n_iter_without_progress=500, min_grad_norm=1e-08,
                      metric="euclidean", init="random", verbose=0, random_state=None,
                      method="barnes_hut", angle=0.5).fit_transform(X)

    X_embedded = MDS(n_components=3).fit_transform(X)

    output["tsne_x"] = [i[0] for i in X_embedded]
    output["tsne_y"] = [i[1] for i in X_embedded]
    output["tsne_z"] = [i[2] for i in X_embedded]

    output["tsne_2d_x"] = [i[0] for i in X_embedded_2d]
    output["tsne_2d_y"] = [i[1] for i in X_embedded_2d]

    # output["tsne"] = list(X_embedded)
    output["cgram_obj"] = cgram_obj
    output["compounds"] = lsm_sublist
    return json.dumps(output)


# Start File Upload
def parse_file(contents, filename):
    content_type, content_string = contents.split(',')

    decoded = base64.b64decode(content_string)
    try:
        if 'csv' in filename:
            # Assume that the user uploaded a CSV file
            df = pd.read_csv(
                io.StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))

        return df
    except Exception as e:
        print(e)
        return []

def parse_contents(contents, filename, date):
    try:
        df = parse_file(contents, filename)
    except Exception as e:
        print(e)
        return html.Div([
            'There was an error processing this file.'
        ])

    return html.Div([
        # html.H5(filename),
        # html.H6(datetime.datetime.fromtimestamp(date)),

        html.H5("Uploaded Compound SMILES File"),
        dash_table.DataTable(
            data=df.to_dict('records'),
            columns=[{'name': i, 'id': i} for i in df.columns],
            pagination_mode='fe',
            pagination_settings={
                'current_page': 0,
                'page_size': 5,
            },
            filtering=True,
            #filtering_types='multi',
            sorting=True,
            sorting_type= 'multi',
            #editable=True,
            #filter_action="native",
            #sort_action="native",
            #sort_mode="multi",
            # row_selectable="multi",
            # row_deletable=True,
            # selected_rows=[],
            # page_action="native",
            # page_current=0,
            # page_size=10,


            style_cell={'textAlign': 'left'},
            style_header={
                'backgroundColor': 'white',
                'fontWeight': 'bold',
                'color': 'steelBlue'
            },
            style_cell_conditional=[
                                       {
                                           'if': {'row_index': 'odd'},
                                           'backgroundColor': 'Wheat'
                                       }
                                   ] + [
                                       {
                                           'if': {'column_id': c},
                                           'textAlign': 'left'
                                       } for c in ['Date', 'Region']
                                   ],

        )
    ,html.Hr([], style={'height': '1px', 'color': 'steelBlue', 'border': 'none', 'color': 'steelBlue',
                       'background-color': 'steelBlue'})
          # horizontal line
        #
        # # For debugging, display the raw contents provided by the web browser
        # html.Div('Raw Content'),
        # html.Pre(contents[0:200] + '...', style={
        #     'whiteSpace': 'pre-wrap',
        #     'wordBreak': 'break-all'
        # })
    ])


# BACKGROUND = "Ivory"


COLORSCALE = [ [0, "rgb(244,236,21)"], [0.3, "rgb(249,210,41)"], [0.4, "rgb(134,191,118)"],
                [0.5, "rgb(37,180,167)"], [0.65, "rgb(17,123,215)"], [1, "rgb(54,50,153)"] ]

def add_markers( figure_data, molecules, plot_type = 'scatter3d' ):
    indices = []
    drug_data = figure_data[0]
    for m in molecules:
        hover_text = drug_data['text']
        for i in range(len(hover_text)):
            if m == hover_text[i]:
                indices.append(i)

    if plot_type == 'histogram2d':
        plot_type = 'scatter'

    traces = []
    for point_number in indices:
        trace = dict(
            x = [ drug_data['x'][point_number] ],
            y = [ drug_data['y'][point_number] ],
            marker = dict(
                color = 'blue',
                size = 16,
                opacity = 0.6,
                symbol = 'crosscross'
            ),
            type = plot_type
        )

        if plot_type == 'scatter3d':
            trace['z'] = [ drug_data['z'][point_number] ]

        traces.append(trace)

    return traces
#scatter_plot_3d( markers = [], plot_type = 'scatter3d', cp_df = X_embedded)

def scatter_plot_3d(
        x,
        y,
        z,
        cp,
        xlabel = 'x',
        ylabel = 'y',
        zlabel = 'z',
        plot_type = 'scatter3d',
        markers = [],
        ):

    def axis_template_3d( title, type='linear' ):
        return dict(
            showbackground = True,
            backgroundcolor = BACKGROUND,
            gridcolor = 'rgb(255, 255, 255)',
            title = title,
            type = type,
            zerolinecolor = 'rgb(255, 255, 255)'
        )

    def axis_template_2d(title):
        return dict(
            xgap = 10, ygap = 10,
            backgroundcolor = BACKGROUND,
            gridcolor = 'rgb(255, 255, 255)',
            title = title,
            zerolinecolor = 'rgb(255, 255, 255)',
            color = '#444'
        )

    def blackout_axis( axis ):
        axis['showgrid'] = False
        axis['zeroline'] = False
        axis['color']  = 'white'
        return axis

    # x = cp_df['x']
    # y = cp_df['y']
    # z = cp_df['z']
    print len(x)
    print len(y)
    print len(z)
    print len(cp)
    data = [ dict(

        x = x,
        y = y,
        z = z,
        # x = cp_df['x'],
        # y = cp_df['y'],
        # z = cp_df['z'],
        mode = 'markers',
        marker = dict(
                # colorscale = COLORSCALE,
                # colorbar = dict( title = "Molecular<br>Weight" ),
                line = dict( color = '#444' ),
                reversescale = True,
                sizeref = 45,
                sizemode = 'diameter',
                opacity = 0.7,
                # size = size,
                # color = color,
            ),
        text = cp,
        type = plot_type,
    ) ]

    layout = dict(
        font = dict( family = 'Raleway' ),
        hovermode = 'closest',
        margin = dict( r=0, t=0, l=0, b=0 ),
        showlegend = False,
        scene = dict(
            xaxis = axis_template_3d( xlabel ),
            yaxis = axis_template_3d( ylabel ),
            zaxis = axis_template_3d( zlabel),
            camera = dict(
                up=dict(x=0, y=0, z=1),
                center=dict(x=0, y=0, z=0),
                eye=dict(x=0.08, y=2.2, z=0.08)
            )
        )
    )

    if plot_type in ['histogram2d', 'scatter']:
        layout['xaxis'] = axis_template_2d(xlabel)
        layout['yaxis'] = axis_template_2d(ylabel)
        layout['plot_bgcolor'] = BACKGROUND
        layout['paper_bgcolor'] = BACKGROUND
        del layout['scene']
        del data[0]['z']

    if plot_type == 'histogram2d':
        # Scatter plot overlay on 2d Histogram
        data[0]['type'] = 'scatter'
        data.append( dict(
                x = x,
                y = y,
                type = 'histogram2d',
                colorscale = 'Greys',
                showscale = False
            ) )
        layout['plot_bgcolor'] = 'black'
        layout['paper_bgcolor'] = 'black'
        layout['xaxis'] = blackout_axis(layout['xaxis'])
        layout['yaxis'] = blackout_axis(layout['yaxis'])
        layout['font']['color'] = 'white'

    if len(markers) > 0:
        data = data + add_markers( data, markers, plot_type = plot_type )

    return dict( data=data, layout=layout )


@app.callback(Output('intermediate-value', 'children'), [Input('upload-data', 'contents'),
               Input('gene_dropdown', 'value'),
               Input('compound_slider', 'value')],
              [State('upload-data', 'filename'),
               State('upload-data', 'last_modified')])
def make_network_obj(list_of_contents, gene, num_compounds, list_of_names, list_of_dates):
    print "in update_cgrammer"
    #num_compounds = 10
    if gene is not '':
        input_df = []
        if list_of_contents is not None:
            df = [parse_file(c, n) for c, n in zip(list_of_contents, list_of_names)]
            input_df = df[0]
            print '+++++++++++'
            print df[0]
            print "size of df:"
            print len(df[0])
            # print df[0]
            print '---------'
        new_network = []
        network_obj = submitGeneToIlincsMethod(gene, "average", num_compounds, input_df)

     # more generally, this line would be
     # json.dumps(cleaned_df)
        return network_obj


@app.callback(Output('heatmap', 'children'),
              [Input('intermediate-value', 'children')])
def update_cgrammer(input_obj):
    print "in update_cgrammer"

    network_obj = json.loads(input_obj)
    lsm_df = network_obj["compounds"]
    network_data = network_obj["cgram_obj"]
    print network_data
    new_network = network_data


    print "before updating cgrammer"
    print len(new_network["mat"])
    len_mat = len(new_network["mat"][0])
    print "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"
    fig = [
        cgrammer.cgrammer(
            id='cgram-component'+str(len_mat),
            label="",
            network_data=new_network

        )
        # html.Hr([], style={'height': '1px', 'color': 'steelBlue', 'border': 'none', 'color': 'steelBlue',
        #                    'background-color': 'steelBlue', 'marginTop':'40px'}),
        # html.H6('This Heatmap is Generated with {} LINCS Compounds And {} Input Compounds'.format(num_compounds, len(input_df))),
        #

        ]
    return fig





@app.callback(Output('post-process', 'children'),
              [Input('intermediate-value', 'children')])
def update_post_process(input_obj):
    print "in update_post_process"
    #num_compounds = 10
    # if gene is not '':
    #     input_df = []
    #     if list_of_contents is not None:
    #         df = [parse_file(c, n) for c, n in zip(list_of_contents, list_of_names)]
    #         input_df = df[0]
    #         print '+++++++++++'
    #         print df[0]
    #         print "size of df:"
    #         print len(df[0])
    #         # print df[0]
    #         print '---------'
    #     new_network = []
    #     network_obj = submitGeneToIlincsMethod(gene, "average", num_compounds, input_df)
    network_obj = json.loads(input_obj)
    lsm_df = network_obj["compounds"]
    network_data = network_obj["cgram_obj"]
    print network_data
    new_network = network_data
    # X = network_data['mat']
    # output["tsne"]
    # tsne_x = network_obj["tsne_x"]
    # tsne_y = network_obj["tsne_y"]
    # tsne_z = network_obj["tsne_z"]
    #
    # tsne_2d_x = network_obj["tsne_2d_x"]
    # tsne_2d_y = network_obj["tsne_2d_y"]

    # cp_df = {}
    # cp_df["cp"] = lsm_df
    # cp_df["x"] = X_embedded[0,:]
    # cp_df["y"] = X_embedded[1, :]
    # cp_df["z"] = X_embedded[2, :]
    # print "tsne"
    # print X_embedded
    # print X_embedded.shape
    # FIGURE = scatter_plot_3d( markers = [], plot_type = 'scatter3d', x = tsne_x, y = tsne_y,
    #                           z = tsne_z, cp = lsm_df )

        #
        #     {
        #     'data': [
        #         {'x': [1, 2, 3], 'y': [4, 1, 2], 'type': 'bar', 'name': 'SF'},
        #         {'x': [1, 2, 3], 'y': [2, 4, 5], 'type': 'bar', 'name': u'Montreal'},
        #     ],
        #     'layout': {
        #         'plot_bgcolor': colors['background'],
        #         'paper_bgcolor': colors['background'],
        #         'font': {
        #             'color': colors['text'
        #         }
        #     }
        # }
    # with open('mult_view2.json', 'r') as f:
        #network_data = json.load(f)
    print "before updating cgrammer"
    print len(new_network["mat"])
    print len(new_network["mat"][0])
    print "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"
    fig = [
        # html.Hr([], style={'height': '1px', 'color': 'steelBlue', 'border': 'none', 'color': 'steelBlue',
        #                    'background-color': 'steelBlue', 'marginTop':'40px'}),
        # html.H6('This Heatmap is Generated with {} LINCS Compounds And {} Input Compounds'.format(num_compounds, len(input_df))),
        #
        # cgrammer.cgrammer(
        #     id='cgram-component',
        #     label='',
        #     network_data=new_network
        #
        #
        # )
        html.Div([
            html.H6('Select Compounds From the Dropdown'),
        dcc.Dropdown(id='lsm_dropdown',
                           multi=True,
                           value="",
                           options=[{'label': i, 'value': i} for i in lsm_df]),
        html.Div(id="lsm_table", style={"marginTop":"15px"}),
        dcc.Tabs(id="tabs-styled-with-inline", value='tab-1', children=[
              dcc.Tab(label='TSNE Plot of Compounds', value='tab-1', style=tab_style, selected_style=tab_selected_style),
              dcc.Tab(label='Gene-Compound Network', value='tab-2', style=tab_style, selected_style=tab_selected_style),
              # dcc.Tab(label='Tab 3', value='tab-3', style=tab_style, selected_style=tab_selected_style),
              # dcc.Tab(label='Tab 4', value='tab-4', style=tab_style, selected_style=tab_selected_style),
          ], style=tabs_styles),

        html.Div(id='tabs-content-inline', style={"marginTop":"15px"}),

        ], className = 'twelve columns' , style={"marginTop":"20px"}),



    #     html.Div([
    #
    #
    #
    #
    #
    #         html.Div([
    #
    #             html.A("",
    #                    id='chem_name',
    #                    href="",
    #                    target="_blank"),
    #
    #             html.Div(
    #                    id='chem_desc',
    #                    # style=dict(maxHeight='400px', fontSize='12px')
    #             ),
    #             html.Br(),
    #             html.Img(id='chem_img', src=""),
    #
    #         ], className='two columns', style=dict(height='300px')),
    #         html.Div([
    #             # dcc.RadioItems(
    #             #     id='charts_radio',
    #             #     options=[
    #             #         dict(label='3D Scatter', value='scatter3d'),
    #             #         dict(label='2D Scatter', value='scatter'),
    #             #         dict(label='2D Histogram', value='histogram2d'),
    #             #     ],
    #             #     labelStyle=dict(display='inline'),
    #             #     value='scatter3d'
    #             # ),
    #             html.H6('Select Compounds From the Dropdown'),
    #             dcc.Graph(id='clickable-graph',
    #                       # style=dict(width='700px'),
    #                       hoverData=dict(points=[dict(pointNumber=0)]),
    #                       # data = X_embedded
    #                       figure=FIGURE
    #                       )
    #
    #         ], className='five columns')
    #     # html.Div([
    #     #     # dcc.RadioItems(
    #     #     #     id='charts_radio',
    #     #     #     options=[
    #     #     #         dict(label='3D Scatter', value='scatter3d'),
    #     #     #         dict(label='2D Scatter', value='scatter'),
    #     #     #         dict(label='2D Histogram', value='histogram2d'),
    #     #     #     ],
    #     #     #     labelStyle=dict(display='inline'),
    #     #     #     value='scatter3d'
    #     #     # ),
    #     #     html.H6('Select Compounds From the Dropdown'),
    #     #     dcc.Graph(id='clickable-graph',
    #     #               # style=dict(width='700px'),
    #     #               hoverData=dict(points=[dict(pointNumber=0)]),
    #     #               #data = X_embedded
    #     #               figure=FIGURE
    #     #               )
    #     #
    #     #   ], className='five columns')
    #         ,
    #         html.Div([
    #             html.Div([
    #                 # html.H6('Select Compounds From the Dropdown'),
    #                 # dash_cytoscape.Cytoscape(
    #                 #     id='cytoscape',
    #                 #     layout={'name': 'preset'},
    #                 #     elements=[
    #                 #         {'data': {'id': 'one', 'label': 'Node 1'},
    #                 #          'position': {'x': 50, 'y': 50}},
    #                 #         {'data': {'id': 'two', 'label': 'Node 2'},
    #                 #          'position': {'x': 200, 'y': 200}},
    #                 #         {'data': {'source': 'one',
    #                 #                   'target': 'two',
    #                 #                   'label': 'Node 1 to 2'}}
    #                 #     ]
    #                 # )
    #
    #
    #
    #                 # html.A(id='download-link4', children='Download File'),
    #                 # html.Img(id='chem_img', src=DRUG_IMG),
    #                 #
    #                 # html.Br(),
    #                 #
    #                 # html.A(STARTING_DRUG,
    #                 #        id='chem_name',
    #                 #        href="https://www.drugbank.ca/drugs/DB01002",
    #                 #        target="_blank"),
    #                 #
    #                 # html.P(DRUG_DESCRIPTION,
    #                 #        id='chem_desc',
    #                 #        style=dict(maxHeight='400px', fontSize='12px')),
    #
    #                 # dcc.Dropdown(
    #                 #     id='dropdown',
    #                 #     options=[{'label': i, 'value': i} for i in ['NYC', 'LA' 'SF']],
    #                 #     value='NYC',
    #                 #     clearable=False
    #                 # )
    #             ])
    #         ], className='six columns')
    # ], className = 'row')
        # , html.Div([
        #             html.A(id='download-link4', children='Download File'),
        #             html.Img(id='chem_img', src=DRUG_IMG),
        #
        #             html.Br(),
        #
        #             html.A(STARTING_DRUG,
        #                    id='chem_name',
        #                    href="https://www.drugbank.ca/drugs/DB01002",
        #                    target="_blank"),
        #
        #             html.P(DRUG_DESCRIPTION,
        #                    id='chem_desc',
        #                    style=dict(maxHeight='400px', fontSize='12px')),
        #
        #         ])
              # html.Div([
              #     html.A(id='download-link', children='Download File'),
              #     dcc.Dropdown(
              #         id='dropdown',
              #         options=[{'label': i, 'value': i} for i in ['NYC', 'LA' 'SF']],
              #         value='NYC',
              #         clearable=False
              #     )
              # ])
    #
    #       ], className = 'six columns')
    #
    # ], className = 'row')

    ]

    return fig




@app.callback(Output('tabs-content-inline', 'children'),
              [Input('tabs-styled-with-inline', 'value')
               , Input('intermediate-value', 'children')])
def render_content(tab, input_obj):
    network_obj = json.loads(input_obj)
    lsm_df = network_obj["compounds"]
    network_data = network_obj["cgram_obj"]
    # print network_data
    new_network = network_data
    # X = network_data['mat']
    # output["tsne"]
    tsne_x = network_obj["tsne_x"]
    tsne_y = network_obj["tsne_y"]
    tsne_z = network_obj["tsne_z"]
    # cp_df = {}
    # cp_df["cp"] = lsm_df
    # cp_df["x"] = X_embedded[0,:]
    # cp_df["y"] = X_embedded[1, :]
    # cp_df["z"] = X_embedded[2, :]
    # print "tsne"
    # print X_embedded
    # print X_embedded.shape
    FIGURE = scatter_plot_3d( markers = [], plot_type = 'scatter3d', x = tsne_x, y = tsne_y,
                              z = tsne_z, cp = lsm_df )
    if tab == 'tab-1':
        return html.Div([
            html.Div([

                html.Div([

                    html.A("",
                           id='chem_name',
                           href="",
                           target="_blank"),
                    html.Br(),

                    html.Img(id='chem_img', src = None, style={'height':'150px','width':'150px'}),
                    html.Div(
                        id='chem_desc',
                        style=dict(maxHeight='400px', fontSize='12px')
                    ),


                ], className='three columns', style=dict(height='300px')),
                html.Div([


                    html.Div(
                        id='chem_desc2',
                        style=dict(maxHeight='400px', fontSize='12px')
                    ),


                ], className='four columns', style=dict(height='300px')),
                html.Div([
                    # dcc.RadioItems(
                    #     id='charts_radio',
                    #     options=[
                    #         dict(label='3D Scatter', value='scatter3d'),
                    #         dict(label='2D Scatter', value='scatter'),
                    #         dict(label='2D Histogram', value='histogram2d'),
                    #     ],
                    #     labelStyle=dict(display='inline'),
                    #     value='scatter3d'
                    # ),
                    # html.H6('Select Compounds From the Dropdown'),
                    dcc.Graph(id='clickable-graph',
                              # style=dict(width='700px'),
                              hoverData=dict(points=[dict(pointNumber=0)]),
                              # data = X_embedded
                              figure = FIGURE
                              )

                ], className='five columns')
            ], className='row')
        ])
    elif tab == 'tab-2':
        return html.Div([
            # html.H6('Select Compounds From the Dropdown'),
            dash_cytoscape.Cytoscape(
                id='cytoscape',
                layout={'name': 'preset'},
                elements=[
                    {'data': {'id': 'one', 'label': 'Node 1'},
                     'position': {'x': 50, 'y': 50}},
                    {'data': {'id': 'two', 'label': 'Node 2'},
                     'position': {'x': 200, 'y': 200}},
                    {'data': {'source': 'one',
                              'target': 'two',
                              'label': 'Node 1 to 2'}}
                ]
            )
        ])
    elif tab == 'tab-3':
        return html.Div([
            html.H3('Tab content 3')
        ])
    elif tab == 'tab-4':
        return html.Div([
            html.H3('Tab content 4')
        ])

def make_dash_table( selection ):
    ''' Return a dash defintion of an HTML table for a Pandas dataframe '''
    df_subset = df.loc[df['NAME'].isin(selection)]
    table = []
    for index, row in df_subset.iterrows():
        html_row = []
        for i in range(len(row)):
            if i == 0 or i == 6:
                html_row.append( html.Td([ row[i] ]) )
            elif i == 1:
                html_row.append( html.Td([ html.A( href=row[i], children='Datasheet' )]))
            elif i == 2:
                html_row.append( html.Td([ html.Img( src=row[i] )]))
        table.append( html.Tr( html_row ) )
    return table

@app.callback(
    Output('lsm_table', 'children'),
    [Input('lsm_dropdown', 'value'),
    Input('intermediate-value', 'children')])
def show_lsm_table(chem_dropdown_values, input_obj):
    print "in show_lsm_table"
    print chem_dropdown_values
    if chem_dropdown_values is not None:
        print "chem_dropdown_values is not None"

        try:
            fig = []
            for item in chem_dropdown_values:
                lsm = item
                print "lsm in chem_dropdown_values:"
                print lsm

                # url = "http://www.ilincs.org/api/CompoundMOAs?filter=%7B%22where%22%3A%7B%22lincsPertID%22%3A%22{}%22%7D%7D".format(lsm)

                url2 = "http://www.ilincs.org/api/SignatureMeta?filter=%7B%22where%22%3A%7B%22lincspertid%22%3A%22{}%22%7D%2C%22limit%22%3A1%7D".format(lsm)
                # response = urllib.urlopen(url)
                #
                # data = json.loads(response.read())

                response2 = urllib.urlopen(url2)

                data2 = json.loads(response2.read())
                #print "data in chem_dropdown_values:"
                # print url
                # print data
                # c1 = html.Div([], className='two columns')
                # c2 = html.Div([], className='four columns')
                # c3 = html.Div([], className='six columns')
                c1 = []
                c2 = []
                c3 = []
                c4 = []






                c1.append(html.A(lsm, href="http://www.ilincs.org/ilincs/perturbagen/compound/{}".format(lsm), target="_blank", style={'display': 'inline-block', 'verticalAlign': 'middle', 'marginLeft':'10px'}))
                if data2[0]['clueIoCompound']:
                    c1.append(html.Br())
                    c1.append(html.P("{}".format(data2[0]['clueIoCompound'])))

                img_src = "http://life.ccs.miami.edu/life/web/images/sm-images/400/{}.png".format(lsm)
                c2.append(html.Img( src=img_src , style={'height':'150px','width':'150px'}))


                # if len(data) > 0:
                #
                #     if data[0]['geneTargets']:
                #         c3.append(html.P('geneTargets: {}'.format(data[0]['geneTargets']), ))
                #         # c2.append(html.P(data[0]['geneTargets']))
                #     if data[0]['mechanismOfAction']:
                #         c3.append(html.P("Integrated Moas: {}".format(data[0]['mechanismOfAction'])))

                if len(data2) > 0:

                    if data2[0]['treatment']:
                        c3.append(html.P('Mechanism Of Action: {}'.format(data2[0]['treatment']), ))
                        # c2.append(html.P(data[0]['geneTargets']))
                    if data2[0]['integratedMoas']:
                        c3.append(html.P("Integrated MOA: {}".format(data2[0]['integratedMoas'])))
                    if data2[0]['GeneTargets']:
                        c3.append(html.P("GeneTargets: {}".format(data2[0]['GeneTargets'])))
                    if data2[0]['pubChemID']:
                        c3.append(html.P("pubChemID: {}".format(data2[0]['pubChemID'])))
                    if data2[0]['stitchID']:
                        c3.append(html.P("stitchID: {}".format(data2[0]['stitchID'])))
                        # c2.append(html.P(data[0]['mechanismOfAction']))

                url3 = "http://www.ilincs.org/api/Compounds/tanimoto?lsmId={}".format(
                    lsm)

                response3 = urllib.urlopen(url3)

                data3 = json.loads(response3.read())
                iterator = 0

                c4.append(html.P('Chemically Similar Compounds to {}:'.format(
                    lsm),style={"marginLeft": "10px"}))
                for item in data3:
                    #print item
                    # "secondChemID":"LSM-6474", "compound":"ST013886", "pubchemCID":450, "similarity":1
                    if iterator > 4:
                        break

                    if item['secondChemID']:
                        c4.append(html.P("LSMID: {} / ".format(item['secondChemID']),
                                          style={"display": "inline-block", "marginTop": "5px", "marginBottom": "2px","fontWeight": "300"}))
                        # fig.append(html.P(item['secondChemID']))
                    # if item['compound']:
                    #     fig.append(html.P("compound: {} / ".format(item['compound']), style={"display": "inline-block","marginTop": "5px", "marginBottom": "2px"}))
                    #     # fig.append(html.P(item['compound']))
                    if item['pubchemCID']:
                        c4.append(html.P("pubchemID: {} / ".format(item['pubchemCID']),
                                          style={"display": "inline-block", "marginTop": "5px", "marginBottom": "2px","fontWeight": "300"}))
                        # fig.append(html.P(item['pubchemCID']))
                    if item['similarity']:
                        c4.append(html.P("similarity: {} ".format(item['similarity']),
                                          style={"display": "inline-block", "marginTop": "5px", "marginBottom": "2px","fontWeight": "300"}))
                        # fig.append(html.P(item['similarity']))
                    c4.append(html.Hr(
                        style={"paddingTop": "2px", "paddingBottom": "2px", "marginTop": "2px", "marginBottom": "2px","fontWeight": "300"}))
                    iterator += 1

                html_row = html.Div([
                    html.Div(c1, className='two columns'),
                    html.Div(c2, className='two columns'),
                    html.Div(c3, className='four columns'),
                    html.Div(c4, className='four columns')
                                # ,
                                # html.Div([
                                #     c2
                                # ], className='four columns'),
                                # html.Div([
                                #      c3
                                # ], className='six columns')

                            ], className='row')

                fig.append(html_row)
                fig.append(html.Hr(style={"marginTop": "2px", "marginBottom": "2px",'color': 'steelBlue',
                           'background-color': 'steelBlue'}))
                print fig

            return fig
        except:
            return
    else:
        return


@app.callback(
    Output('clickable-graph', 'figure'),
    [Input('lsm_dropdown', 'value'),
    Input('intermediate-value', 'children')])
def highlight_molecule(chem_dropdown_values, input_obj):
    network_obj = json.loads(input_obj)
    lsm_df = network_obj["compounds"]
    network_data = network_obj["cgram_obj"]
    print "||||||||||||||||||||||||||||||||||||||||"
    print len(network_data["mat"])
    print len(network_data["mat"][0])
    print "||||||||||||||||||||||||||||||||||||||||"
    # X_embedded = network_obj["tsne"]
    # # print network_data
    # # new_network = network_data
    # # X = network_data['mat']
    # # X_embedded = TSNE(n_components=3, perplexity=100.0, early_exaggeration=12.0,
    # #                   learning_rate=500.0, n_iter=10000, n_iter_without_progress=500, min_grad_norm=1e-08,
    # #                   metric="euclidean", init="random", verbose=0, random_state=None,
    # #                   method="barnes_hut", angle=0.5).fit_transform(X)
    # # cp_df = {}
    # # cp_df["cp"] = lsm_df
    # # cp_df["x"] = X_embedded[0,:]
    # # cp_df["y"] = X_embedded[1, :]
    # # cp_df["z"] = X_embedded[2, :]
    # print "tsne"
    # print X_embedded
    # print X_embedded.shape
    # FIGURE = scatter_plot_3d( markers = chem_dropdown_values, plot_type = 'scatter3d', x = [i[0] for i in X_embedded], y = [i[1] for i in X_embedded],
    #                           z = [i[2] for i in X_embedded], cp = lsm_df )

    tsne_x = network_obj["tsne_x"]
    tsne_y = network_obj["tsne_y"]
    tsne_z = network_obj["tsne_z"]
    # cp_df = {}
    # cp_df["cp"] = lsm_df
    # cp_df["x"] = X_embedded[0,:]
    # cp_df["y"] = X_embedded[1, :]
    # cp_df["z"] = X_embedded[2, :]
    # print "tsne"
    # print X_embedded
    # print X_embedded.shape
    FIGURE = scatter_plot_3d( markers = chem_dropdown_values, plot_type = 'scatter3d', x = tsne_x, y = tsne_y,
                              z = tsne_z, cp = lsm_df )

    return FIGURE

#
# FIGURE = scatter_plot_3d(markers = chem_dropdown_values, plot_type='scatter3d', x=[i[0] for i in X_embedded], y=[i[1] for i in X_embedded],
#                          z=[i[2] for i in X_embedded], cp=lsm_df)

# def dfRowFromHover( hoverData ):
#     ''' Returns row for hover point as a Pandas Series '''
#     if hoverData is not None:
#         if 'points' in hoverData:
#             firstPoint = hoverData['points'][0]
#             if 'pointNumber' in firstPoint:
#                 point_number = firstPoint['pointNumber']
#                 molecule_name = str(FIGURE['data'][0]['text'][point_number]).strip()
#                 return df.loc[df['NAME'] == molecule_name]
#     return pd.Series()

@app.callback(
    Output('chem_desc', 'children'),
    [Input('clickable-graph', 'hoverData')])
def display_molecule(hoverData):
    # "http://lincsportal.ccs.miami.edu/dcic/api/fetchmolecules?searchTerm=lincsidentifier:LSM-42782"
    if hoverData is not None:
        try:
            lsm = hoverData['points'][0]['text']

            #"http://www.ilincs.org/api/CompoundMOAs?filter=%7B%22where%22%3A%7B%22lincsPertID%22%3A%22{}1%22%7D%7D".format(lsm)
            #'http://www.ilincs.org/api/CompoundMOAs?filter={"where":{"lincsPertID":"LSM-2121"},"limit":10}'
            url = "http://www.ilincs.org/api/CompoundMOAs?filter=%7B%22where%22%3A%7B%22lincsPertID%22%3A%22{}%22%7D%7D".format(lsm)

            response = urllib.urlopen(url)
            # print "response"
            # print url
            # print response
            # print "++++++++++"
            data = json.loads(response.read())
            # print data
            # print "++++++++++++++++++++++++++++++++"
            # print data[0]['geneTargets']
            # print data[0]['mechanismOfAction']
            # print data['results']['documents']
            # print data['results']['documents'][0]
            # print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
            # print data['results']['documents'][0]['MECH_OF_ACTION']
            # print data['results']['documents'][0]['MOLECULAR_FORMULA']
            # print data['results']['documents'][0]['SM_Alternative_Name']
            # print data['results']['documents'][0]['Target']
            print "---------------"
            fig = []
            if data[0]['geneTargets']:
                fig.append(html.P('geneTargets:',style={"fontWeight":"bold"}))
                fig.append(html.P(data[0]['geneTargets']))
            if data[0]['mechanismOfAction']:
                fig.append(html.P("mechanism Of Action:",style={"fontWeight":"bold"}))
                fig.append(html.P(data[0]['mechanismOfAction']))
            # if data[0]['mechanismOfAction']:
            #     fig.append(html.P("mechanism Of Action:",style={"font":"bold"}))
            #     fig.append(html.P(data[0]['mechanismOfAction']))
            # if data[0]['mechanismOfAction']:
            #     fig.append(html.P("mechanism Of Action:",style={"font":"bold"}))
            #     fig.append(html.P(data[0]['mechanismOfAction']))
            # if data['results']['documents'][0]['SM_Alternative_Name']:
            #     fig.append(html.P("Alternative_Name:",style={"font":"bold"}))
            #     fig.append(html.P(data['results']['documents'][0]['SM_Alternative_Name']))
            # if data['results']['documents'][0]['Target']:
            #     fig.append(html.P("Target:",style={"font":"bold"}))
            #     fig.append(html.P(data['results']['documents'][0]['Target']))
            # if data['results']['documents'][0]['MECH_OF_ACTION']:
            #     fig.append(html.P("MOA:"))
            #     fig.append(html.P(data["MECH_OF_ACTION"]))




            return fig
        except:
            return
    else:
        return

@app.callback(
    Output('chem_desc2', 'children'),
    [Input('clickable-graph', 'hoverData')])
def display_molecule(hoverData):
    # "http://lincsportal.ccs.miami.edu/dcic/api/fetchmolecules?searchTerm=lincsidentifier:LSM-42782"
    if hoverData is not None:
        try:
            lsm = hoverData['points'][0]['text']

            # "http://www.ilincs.org/api/CompoundMOAs?filter=%7B%22where%22%3A%7B%22lincsPertID%22%3A%22{}1%22%7D%7D".format(lsm)
            # 'http://www.ilincs.org/api/CompoundMOAs?filter={"where":{"lincsPertID":"LSM-2121"},"limit":10}'
            url = "http://www.ilincs.org/api/Compounds/tanimoto?lsmId={}".format(
                lsm)

            response = urllib.urlopen(url)
            # print "response - 2"
            # print url
            # print response
            # print "data 2 ++++++++++"
            data = json.loads(response.read())
            # print data
            # print "data 2 ++++++++++++++++++++++++++++++++"
            # print data[0]['geneTargets']
            # print data[0]['mechanismOfAction']
            # print data['results']['documents']
            # print data['results']['documents'][0]
            # print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
            # print data['results']['documents'][0]['MECH_OF_ACTION']
            # print data['results']['documents'][0]['MOLECULAR_FORMULA']
            # print data['results']['documents'][0]['SM_Alternative_Name']
            # print data['results']['documents'][0]['Target']
            print "data 2 ---------------"
            fig = []
            fig.append(html.P('Other Chemically Similar Compounds to {}:'.format(
                lsm), style={"fontWeight": "bold"}))
            for item in data:
                print item
                # "secondChemID":"LSM-6474", "compound":"ST013886", "pubchemCID":450, "similarity":1
                if item['secondChemID']:
                    fig.append(html.P("LSMID: {} / ".format(item['secondChemID']), style={"display": "inline-block","marginTop": "5px", "marginBottom": "2px"}))
                    # fig.append(html.P(item['secondChemID']))
                # if item['compound']:
                #     fig.append(html.P("compound: {} / ".format(item['compound']), style={"display": "inline-block","marginTop": "5px", "marginBottom": "2px"}))
                #     # fig.append(html.P(item['compound']))
                if item['pubchemCID']:
                    fig.append(html.P("pubchemID: {} / ".format(item['pubchemCID']), style={ "display": "inline-block","marginTop": "5px", "marginBottom": "2px"}  ))
                    # fig.append(html.P(item['pubchemCID']))
                if item['similarity']:
                    fig.append(html.P("similarity: {} ".format(item['similarity']), style={"display": "inline-block","marginTop": "5px", "marginBottom": "2px"}))
                    # fig.append(html.P(item['similarity']))
                fig.append(html.Hr(style={"paddingTop": "2px", "paddingBottom": "2px","marginTop": "2px", "marginBottom": "2px"}))


            return fig
        except:
            return
    else:
        return




#
@app.callback(
    Output('chem_img', 'src'),
    [Input('clickable-graph', 'hoverData')])
def display_image(hoverData):
    # row = dfRowFromHover(hoverData)
    # if row.empty:
    #     return
    if hoverData is not None:
        try:
            lsm = hoverData['points'][0]['text']
            print "in chem_img"
            print lsm
            img_src = "http://life.ccs.miami.edu/life/web/images/sm-images/400/{}.png".format(lsm)
            return img_src
        except:
            return
    else:
        return
#
# @app.callback(
#     Output('chem_name', 'children'),
#     [Input('cgram-component', 'children')])
# def return_cgram_compone(ch):
#     print "in cgram-component"
#     print ch
#     return



@app.callback(
    Output('chem_name', 'children'),
    [Input('clickable-graph', 'hoverData')])
def return_molecule_name(hoverData):
    if hoverData is not None:
        try:
            #print json.dumps(hoverData)
            lsm = hoverData['points'][0]['text']
            # print "in chem_name"
            # print lsm
            # link = "http://www.ilincs.org/ilincs/perturbagen/compound/{}".format(lsm)
            return lsm
        except:
            return
    else:
        return

@app.callback(
    Output('chem_name', 'href'),
    [Input('clickable-graph', 'hoverData')])
def return_molecule_name(hoverData):
    if hoverData is not None:
        try:
            #print json.dumps(hoverData)
            lsm = hoverData['points'][0]['text']
            print "in chem_name"
            print lsm
            link = "http://www.ilincs.org/ilincs/perturbagen/compound/{}".format(lsm)
            return link
        except:
            return
    else:
        return



@app.callback(Output('output-data-upload', 'children'),
              [Input('upload-data', 'contents')],
              [State('upload-data', 'filename'),
               State('upload-data', 'last_modified')])
def update_output(list_of_contents, list_of_names, list_of_dates):

    if list_of_contents is not None:
        children = [
            parse_contents(c, n, d) for c, n, d in
            zip(list_of_contents, list_of_names, list_of_dates)]
        return children

# End File Upload


# @app.server.route('/favicon.ico')
# def favicon():
#     return send_from_directory(os.path.join(app.server.root_path, 'static'),
#                                's2l.png', mimetype='image/vnd.microsoft.icon')

@app.server.route('/static/<path:path>')
def static_file(path):
    static_folder = os.path.join(os.getcwd(), 'static')
    return send_from_directory(static_folder, path)
# @app.server.route('/favicon.ico')
# def favicon():
#     return flask.send_from_directory(os.path.join(app.server.root_path, 'static'),
#                                                   'favicon.ico', mimetype='/static/img/sig2lead_black2.png')

# @app.server.route('{}<stylesheet>'.format(static_css_route))
# def serve_stylesheet(stylesheet):
#     if stylesheet not in stylesheets:
#         raise Exception(
#             '"{}" is excluded from the allowed static files'.format(
#                 stylesheet
#             )
#         )
#     return flask.send_from_directory(css_directory, stylesheet)
#
#
# for stylesheet in stylesheets:
#     app.css.append_css({"external_url": "/static/{}".format(stylesheet)})

if __name__ == '__main__':
    app.run_server(debug=True, port=8052)

