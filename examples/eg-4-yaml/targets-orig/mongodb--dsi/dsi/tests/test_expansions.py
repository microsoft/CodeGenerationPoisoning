"""
Unit tests for 'expansions.py'.

The tests/expansions directory has a number of subdirectories, each corresponding to a single
test-case. The test-cases were generated by running a sys-perf patch-test and cat'ing the
expansions.yml files and the bootstrap.yml etc files generated legacy system_perf.yml.
The "expansions.yml" files are "inputs"; this file asserts that expansions.py produces the same
output files.
"""

import os
import shutil
import tempfile
import unittest

import yaml

from dsi import expansions
from test_lib.fixture_files import FixtureFiles


class FixtureTestCase:
    """
    Represents one subdir of tests/expansions.
    """

    name: str
    tcase_root_dir: str
    expansions_file: str
    expected_dir: str
    actual_dir: str

    def __init__(
        self, dirname: str, basename: str, into_dir_base: str, write_actual_to_expected=False
    ):
        """
        :param dirname:
            Path to dsi/tests/unittest-files/expansions
        :param basename:
            Name of the subdir e.g. "patch-dsi-selftest"
        :param into_dir_base:
            Where to write the output files
        :param write_actual_to_expected:
            True to write the actual output to the "expected" directory.
            This is useful for debugging.
        """

        self.name = basename

        # tests/expansions/patch-foo
        self.tcase_root_dir = os.path.join(dirname, basename)

        # tests/expansions/patch-foo/expansions.yml
        self.expansions_file = os.path.join(self.tcase_root_dir, "expansions.yml")
        # tests/expansions/patch-foo/expected
        self.expected_dir = os.path.join(self.tcase_root_dir, "expected")

        # /tmp/patch-foo
        self.actual_dir = (
            self.expected_dir if write_actual_to_expected else os.path.join(into_dir_base, basename)
        )

        if not os.path.exists(self.actual_dir):
            os.mkdir(self.actual_dir)

    def __str__(self):
        return self.tcase_root_dir

    def _write(self):
        expansions.write_files(self.expansions_file, self.actual_dir, "[REDACTED]")
        # expansions.write_files(self.expansions_file, self.expected_dir, "[REDACTED]")

    @staticmethod
    def load_dir(dirname: str) -> dict:
        """
        :param dirname: a directory with yaml files
        :return: a dict with keys being the basenames and values being the loaded yaml contents
        """
        out = {}
        for basename in os.listdir(dirname):
            with open(os.path.join(dirname, basename)) as yaml_file:
                out[basename] = yaml.safe_load(yaml_file)
        return out

    def expect_actual(self) -> (dict, dict):
        self._write()
        expected = FixtureTestCase.load_dir(self.expected_dir)
        actual = FixtureTestCase.load_dir(self.actual_dir)
        return expected, actual


FIXTURE_FILES = FixtureFiles()
EXPANSIONS_DIR = FIXTURE_FILES.fixture_file_path("expansions")


class TestWriteExpansions(unittest.TestCase):
    def setUp(self):
        self.into_dir_base = tempfile.mkdtemp()

    def tearDown(self) -> None:
        shutil.rmtree(self.into_dir_base)

    def test_missing_data(self):
        input_file = FIXTURE_FILES.fixture_file_path(
            "expansions", "patch-dsi-selftest", "expansions.yml"
        )
        with open(input_file) as yaml_file:
            contents = yaml.safe_load(yaml_file)
        # Delete a key we know we need.
        del contents["terraform_secret"]
        to_file = os.path.join(self.into_dir_base, "expansions.yml")
        with open(to_file, "w+", encoding="utf-8") as output:
            yaml.dump(contents, output)
        with self.assertRaises(expansions.InvalidConfigurationException) as assertion:
            expansions.write_files(to_file, self.into_dir_base, "")
        self.assertTrue("Missing key terraform_secret in dict that has" in str(assertion.exception))

    def test_expansions_dirs(self):
        test_cases = [
            FixtureTestCase(EXPANSIONS_DIR, basename, self.into_dir_base)
            for basename in os.listdir(EXPANSIONS_DIR)
            if "." not in basename
        ]
        # pylint: disable=unnecessary-lambda
        test_cases.sort(key=lambda t: str(t))

        failure = None

        for tcase in test_cases:
            expected, actual = tcase.expect_actual()
            try:
                self.assertDictEqual(expected, actual, str(tcase))
            except AssertionError as e:
                print(e)
                failure = e

        if failure:
            raise failure
